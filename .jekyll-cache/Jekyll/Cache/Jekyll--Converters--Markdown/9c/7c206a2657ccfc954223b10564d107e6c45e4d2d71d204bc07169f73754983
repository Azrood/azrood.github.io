I"¨#<h1 id="main-points">Main Points</h1>
<ul>
  <li><a href="#SNMP">#SNMP</a></li>
  <li><a href="https://book.hacktricks.xyz/pentesting/pentesting-snmp/snmp-rce">SNMP can execute binary</a></li>
</ul>

<h1 id="writeup">Writeup</h1>

<h2 id="enumeration">Enumeration</h2>
<p>nmap enumeration:</p>
<pre><code class="language-nmap">* 22/tcp   open  ssh             syn-ack ttl 63 OpenSSH 8.0 (protocol 2.0)
* 80/tcp   open  http            syn-ack ttl 63 nginx 1.14.1
* 9090/tcp open  ssl/zeus-admin? syn-ack ttl 63
	 ssl-cert: Subject: commonName=dms-pit.htb/ organizationName=4cd9329523184b0ea52ba0d20a1a6f92/countryName=US
	 Subject Alternative Name: DNS:dms-pit.htb, DNS:localhost, IP Address:127.0.0.1

</code></pre>
<p>We add the <code class="language-plaintext highlighter-rouge">dms-pit.htb</code> to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> just in case there is virtual host.</p>

<p>Port 80 doesn‚Äôt have anything interesting, Port 9090 has a login page, Hydra can‚Äôt seem to bruteforce it, after launching nmap scan of UDP we find open port 161. This port corresponds to SNMP, it‚Äôs a protocol.</p>

<h3 id="snmp">SNMP</h3>
<p>Download and install <code class="language-plaintext highlighter-rouge">snmp-mibs-downloader</code> (apt)</p>

<p>To enumerate fully, we start walking the tree with <code class="language-plaintext highlighter-rouge">snmpwalk</code>
<strong>Notes</strong> :  <code class="language-plaintext highlighter-rouge">snmpwalk</code> by default starts from ‚Äúmib-2‚Äù, so you should specify <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">iso</code> to start enumerating from the root tree.</p>

<p><code class="language-plaintext highlighter-rouge">snmpwalk -v 1 -c public 10.10.10.241 1</code></p>

<h2 id="foothold">Foothold</h2>
<p>We notice this path
<img src="../Pasted%20image%2020210712230908.png" alt="Pasted image 20210712230908.png" />
Trying to access https://pit.htb:9090/seeddms51x/seeddms doesn‚Äôt work.
While https://dms-pit.htb/ gives a forbidden error, we can access the URL https://dms-pit.htb/seeddms51x/seeddms</p>

<p><img src="../Pasted%20image%2020210712231031.png" alt="Pasted image 20210712231031.png" /></p>

<p>Since we saw the user <code class="language-plaintext highlighter-rouge">michelle</code> when enumrating SNMP, I try <code class="language-plaintext highlighter-rouge">michelle: michelle</code>, and it works.
We can login
<img src="../Pasted%20image%2020210712231359.png" alt="Pasted image 20210712231359.png" /></p>

<p>There is upgrade note posted by Admin
<img src="../Pasted%20image%2020210712231451.png" alt="Pasted image 20210712231451.png" /></p>

<p>We download the attachment, nothing really interesting except an old CVE fix about unvalidated file upload. We read about the CVE in exploit-db.</p>

<p>We see there is default folder for uploaded files</p>
<pre><code class="language-txt">data/1048576/&lt;document_id&gt;/&lt;file&gt;.php
</code></pre>

<p>We see in the docs folder a folder named ‚ÄúMichelle‚Äù let‚Äôs see if we can upload a php webshell.
<img src="../Pasted%20image%2020210712232540.png" alt="Pasted image 20210712232540.png" /></p>

<p>We add a document
<img src="../Pasted%20image%2020210712232926.png" alt="Pasted image 20210712232926.png" />
<img src="../Pasted%20image%2020210712233520.png" alt="Pasted image 20210712233520.png" /></p>

<p>We setup our netcat listener
<img src="../Pasted%20image%2020210712232945.png" alt="Pasted image 20210712232945.png" /></p>

<p>And we access the path
<code class="language-plaintext highlighter-rouge">dms-pit.htb/seeddms51x/data/1048576/&lt;document_id&gt;/&lt;file&gt;</code>
(We see our document_id is 30, you can see it in the URL as parameter, and the &lt;file&gt; is the name you specified in the form)</p>

<p>We have a shell, and we go to /var/www/html/conf</p>

<p>we see a file <code class="language-plaintext highlighter-rouge">settings.xml</code>
let‚Äôs print it
We find some database creds
<img src="../Pasted%20image%2020210713002133.png" alt="Pasted image 20210713002133.png" /></p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;database</span> <span class="na">dbDriver=</span><span class="s">"mysql"</span> <span class="na">dbHostname=</span><span class="s">"localhost"</span> <span class="na">dbDatabase=</span><span class="s">"seeddms"</span> <span class="na">dbUser=</span><span class="s">"seeddms"</span> <span class="na">dbPass=</span><span class="s">"ied^ieY6xoquu"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Let‚Äôs try these creds in the main page at port 9090
Didnt work.</p>

<p>Let‚Äôs try <code class="language-plaintext highlighter-rouge">Michelle: ied^ieY6xoquu</code>
It works !
We have these options
<img src="../Pasted%20image%2020210713004107.png" alt="Pasted image 20210713004107.png" />
And in the profile we see
<img src="../Pasted%20image%2020210713004134.png" alt="Pasted image 20210713004134.png" />
Hmmm interesting.
Further down the road in the left bar we see a Terminal
<img src="../Pasted%20image%2020210713004256.png" alt="Pasted image 20210713004256.png" /></p>

<p><img src="../Pasted%20image%2020210713004306.png" alt="Pasted image 20210713004306.png" />
Nice ! We can get user flag .</p>

<h2 id="priv-esc">Priv Esc</h2>
<p>We grep in the output of snmpwalk for <code class="language-plaintext highlighter-rouge">root</code>, we see there is a user root part of the OID
<code class="language-plaintext highlighter-rouge">NET-SNMP-EXTEND-MIB::nsExtendOutLine."monitoring"</code>
Let‚Äôs fetch all of this MIB module with <code class="language-plaintext highlighter-rouge">nsExtendObjects</code></p>

<ul>
  <li><a href="https://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.4.1.8072.1.3">OID viewer</a></li>
</ul>

<p>We see there is a binary <code class="language-plaintext highlighter-rouge">/usr/bin/monitor</code>
in the OID <code class="language-plaintext highlighter-rouge">NET-SNMP-EXTEND-MIB::nsExtendCommand."monitoring"</code>
<img src="../Pasted%20image%2020210713032341.png" alt="Pasted image 20210713032341.png" />
Let‚Äôs check it from Michelle</p>

<p><img src="../Pasted%20image%2020210713032323.png" alt="Pasted image 20210713032323.png" />
It‚Äôs a script shell.</p>

<p><img src="../Pasted%20image%2020210713032423.png" alt="Pasted image 20210713032423.png" /></p>

<p>So what it does is iterate in the folder <code class="language-plaintext highlighter-rouge">/usr/local/monitoring/</code> for files that start with <code class="language-plaintext highlighter-rouge">check</code> and end with <code class="language-plaintext highlighter-rouge">sh</code>, so <code class="language-plaintext highlighter-rouge">check*sh</code>
and execute them with bash. And seeing the permissions, it is ran as root. So we can get a root shell.</p>

<p>Unfortonately we can‚Äôt use a reverse shell, because there is a firewall iptables that is blocking the connection. So we can rely on ssh, we will create ou ssh key, and create a script that will copy the ssh key to the <code class="language-plaintext highlighter-rouge">/root/.ssh</code> folder and we will use that key to connect to root through ssh.</p>

<p>Fortunately we can write in <code class="language-plaintext highlighter-rouge">/usr/local/monitoring/</code></p>

<p>let‚Äôs generate a ssh key in our kali machine
<code class="language-plaintext highlighter-rouge">ssh-keygen</code>
<img src="../Pasted%20image%2020210713032955.png" alt="Pasted image 20210713032955.png" /></p>

<p>And the script <code class="language-plaintext highlighter-rouge">check1.sh</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="s2">"&lt;PASTE HERE THE CONTENT OF id_rsa.pub&gt;"</span> <span class="o">&gt;</span> /root/.ssh/authorized_keys 
</code></pre></div></div>

<p>We copy this script by uploading it with curl and setting up our Python HTTP Server.</p>

<p>To trigger the <code class="language-plaintext highlighter-rouge">monitor</code> script to run our script, we can execute it with snmpwalk by querying its specific OID and querying the <code class="language-plaintext highlighter-rouge">run_on_read()</code></p>

<p><code class="language-plaintext highlighter-rouge">NET-SNMP-EXTEND-MIB::nsExtendRunType."monitoring" = INTEGER: run-on-read(1)
</code>
See <a href="https://book.hacktricks.xyz/pentesting/pentesting-snmp/snmp-rce">SNMP RCE</a>
Command :</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">snmpwalk -c public -v 1 10.10.10.241 nsExtendObject</code></li>
</ul>

<p>Then run <code class="language-plaintext highlighter-rouge">ssh root@10.10.10.241 -i id_rsa</code>
You have root, you can get the flag :)</p>
<h1 id="root-hash">root hash</h1>
<p><code class="language-plaintext highlighter-rouge">$6$4ZnZ0Iv3NzFIZtKa$tA78wgAwaBBSg96ecMRPYIogQmANo/9pJhHmf06bCmbKukMDM9rdT2Mdc6UhwD1raDzXIrk.zjQ9lkJIoLShE</code></p>
:ET